TestCase subclass: #VanHelsingTest	instanceVariableNames: 'ataqueAAldea dracula edward lupin norbert aldea castillo sapoPepe'	classVariableNames: ''	poolDictionaries: ''	category: 'PdeP-VanHelsing-Tests'!!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/9/2012 00:28'!setUp	Vampiro velocidad: 100.	dracula := Vampiro conVitalidad: 10000.	edward := Vampiro conVitalidad: 1.	lupin := HombreLobo conVitalidad: 300.	norbert := Dragon conVitalidad: 500 velocidad: 200.	aldea := Aldea new.		aldea agregarAtaque: {dracula. edward. lupin. norbert}.	ataqueAAldea := aldea ataques first.		aldea agregarAtaque: {lupin.edward }.	aldea agregarAtaque:  {lupin.dracula  }.		castillo := Castillo conPlus: 2000.	castillo agregarAtaque:  {edward }.		1 to: 3 do: [:n | (aldea ataques at: n) fecha: (Date newDay: n month: 10 year:2012)].		sapoPepe := SapoPepe new.! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/8/2012 23:29'!testAldeaDestruidaPorAlgunAtaque	self assert: aldea fueDestruida ! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/8/2012 23:31'!testElCastilloNoFueDestruidoPorAtaques	self deny: castillo  fueDestruida ! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/8/2012 15:01'!testMonstruoMasPeligrosoDeUnAtaque	self assert: ataqueAAldea monstruoMasPeligroso equals: dracula! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/8/2012 23:07'!testMonstruosRapidosDeUnaZona	self assert: aldea monstruosRapidos  size equals: 2.	self should: [(aldea monstruosRapidos  difference:  {norbert  . lupin}) isEmpty ].! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/8/2012 22:28'!testNightmareTeamDeUnaZona	self assert: aldea nightmareTeam size equals: 2.	self should: [(aldea nightmareTeam difference:  {dracula . lupin}) isEmpty ].! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/9/2012 00:24'!testUnCastilloNoPuedeSerAtacadoSiNoHayAlmenosUnMonstruoConPeligrosidadMayorA256	self should: [castillo registrarAtaque: {edward  }] raise: NoHayMonstruosParaAtacarException ! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/9/2012 00:24'!testUnCastilloPuedeSerAtacadoSiHayAlmenosUnMonstruoConPeligrosidadMayorA256	self shouldnt: [castillo registrarAtaque: {norbert . dracula }] raise: NoHayMonstruosParaAtacarException ! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/9/2012 00:11'!testUnMonstruoEsPateticoSiAtacaUnaZonaYaDestruida	self assert: ({lupin. edward . dracula } allSatisfy: [:monstruo | monstruo patetico ]).	self deny: norbert patetico. ! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/9/2012 00:31'!testUnaAldeaNoPuedeSerAtacadaPorElSapoPepePorqueEsPatetico	self should: [Aldea new registrarAtaque: {sapoPepe}] raise: NoHayMonstruosParaAtacarException ! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/9/2012 00:22'!testUnaAldeaNoPuedeSerAtacadaSiTodosLosMonstruosSonPateticos	self should: [aldea registrarAtaque: {edward  . dracula }] raise: NoHayMonstruosParaAtacarException ! !!VanHelsingTest methodsFor: 'as yet unclassified' stamp: 'MarianaMatos 10/9/2012 00:22'!testUnaAldeaPuedeSerAtacadaSiHayAlmenosUnMonstruoNoPatetico	self shouldnt: [aldea registrarAtaque: {norbert . dracula }] raise: NoHayMonstruosParaAtacarException ! !